//*****************************************************************************
Перем Ссылки;
Перем ПравилаОбмена;

//*****************************************************************************
Процедура ВывестиСообщение(Сообщение)
	
	ТекстСообщения = "********************************************************************" + Символы.ПС;
	
	ТекстСообщения = ТекстСообщения + Сообщение + Символы.ПС;
	
	ТекстСообщения = ТекстСообщения + "********************************************************************";
	
	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	
КонецПроцедуры
//*****************************************************************************
Функция ФункцияВосстановленияЧтения(Свойство, Значение, ДополнительныеПараметры) Экспорт
	
	Попытка
		
		Если (СтрНайти(Свойство, "Дата") > 0) ИЛИ (СтрНайти(Свойство, "Время") > 0) Тогда
			
			Возврат ПрочитатьДатуJSON(Значение, ФорматДатыJSON.ISO);
			
		КонецЕсли;
		
	Исключение
		
	КонецПопытки;
	
КонецФункции
//*****************************************************************************
Процедура Загрузить(Параметры, ОбъектыВыгрузки = Неопределено) Экспорт
	
	Настройки = Exchange_УдаленнаяБаза.ПолучитьБазу(Параметры.База);
	
	Если Настройки <> Неопределено Тогда
		
		Структура = Новый Структура;
		
		Структура.Вставить("Период",			 Новый Структура("ДатаНачала, ДатаОкончания", Параметры.ДатаНачала, Параметры.ДатаОкончания));
		Структура.Вставить("Документы",			 Параметры.МассивДокументов);
		Структура.Вставить("Справочники",		 Параметры.МассивСправочников);
		Структура.Вставить("ПравилаВыгрузки",	 ПолучитьПравилаВыгрузки(Настройки, ОбъектыВыгрузки));
		
		ЗаписьJSON = Новый ЗаписьJSON;
		
		ЗаписьJSON.УстановитьСтроку(Новый ПараметрыЗаписиJSON(, Символы.Таб));
		
		ЗаписатьJSON(ЗаписьJSON, Структура); 
		
		HTTPЗапрос = Новый HTTPЗапрос();
		
		HTTPЗапрос.Заголовки.Вставить("Charset",		 "utf-8");
		HTTPЗапрос.Заголовки.Вставить("Content-Type",	 "application/json");
		HTTPЗапрос.Заголовки.Вставить("Authorization",	 "Basic " + Base64.ВBase64(Настройки.ИмяПользователя + ":" + Настройки.Пароль));
		
		HTTPЗапрос.АдресРесурса = "/" + Настройки.Публикация + "/hs/data/exchange";
		
		HTTPЗапрос.УстановитьТелоИзСтроки(ЗаписьJSON.Закрыть(), КодировкаТекста.UTF8, ИспользованиеByteOrderMark.НеИспользовать);
		
		HTTPСоединение = Новый HTTPСоединение(Настройки.Адрес, Настройки.Порт,,,, 30 * 15);
		
		HTTPОтвет = HTTPСоединение.ОтправитьДляОбработки(HTTPЗапрос);
		
		Если HTTPОтвет.КодСостояния = 200 Тогда 
			
			ЧтениеJSON = Новый ЧтениеJSON;
			
			ЧтениеJSON.УстановитьСтроку(HTTPОтвет.ПолучитьТелоКакСтроку());
			
			Данные = ПрочитатьJSON(ЧтениеJSON);
			
			ЧтениеJSON.Закрыть();
			
			ЗагрузитьПравила(Настройки);
			
			Ссылки = Новый Соответствие;
			
			ПорядокЗагрузкиОбъектов = Новый Структура;
			
			ПорядокЗагрузкиОбъектов.Вставить("Справочники");
			ПорядокЗагрузкиОбъектов.Вставить("Документы");
			
			Если Данные <> Неопределено Тогда
				
				ЧтениеJSON = Новый ЧтениеJSON;
				
				ЧтениеJSON.УстановитьСтроку(Данные.message);
				
				ДанныеОбмена = ПрочитатьJSON(ЧтениеJSON,,,, "ФункцияВосстановленияЧтения", ЭтотОбъект);
				
				ЧтениеJSON.Закрыть();
				
				Если ДанныеОбмена <> Неопределено Тогда
					
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Начало загрузки: " + ТекущаяДата());
					
					Для Каждого Элемент Из ПорядокЗагрузкиОбъектов Цикл
						
						Для А = 0 По ДанныеОбмена.Количество() - 1 Цикл
							
							Если ДанныеОбмена[А].Свойство(Элемент.Ключ) Тогда 
								
								ЗагрузитьОбъекты(Параметры, Настройки, ДанныеОбмена[А][Элемент.Ключ], ДанныеОбмена[А], ДанныеОбмена);
								
							КонецЕсли;
							
						КонецЦикла;
						
					КонецЦикла;
					
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Окончание загрузки: " + ТекущаяДата());
					
				КонецЕсли;
				
			КонецЕсли;
			
		Иначе
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Ошибка загрузки данных: " + HTTPОтвет.ПолучитьТелоКакСтроку());
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры
//*****************************************************************************
Функция ПолучитьПравилаВыгрузки(Настройки, ОбъектыВыгрузки)
	
	Если Настройки <> Неопределено Тогда
		
		Если Настройки.Свойство("ПравилаВыгрузки") Тогда
			
			Если ЗначениеЗаполнено(Настройки.ПравилаВыгрузки) Тогда
				
				Если ОбъектыВыгрузки <> Неопределено Тогда
					
					ЧтениеJSON = Новый ЧтениеJSON;
					
					ЧтениеJSON.УстановитьСтроку(Настройки.ПравилаВыгрузки);
					
					ПравилаВыгрузки = ПрочитатьJSON(ЧтениеJSON);
					
					ЧтениеJSON.Закрыть();
					
					Условие = Истина;
					
					Если ПравилаВыгрузки <> Неопределено Тогда
						
						Для Каждого ОбъектВыгрузки Из ОбъектыВыгрузки Цикл
							
							Для Каждого ПравилоВыгрузки Из ПравилаВыгрузки Цикл
								
								Для Каждого Элемент Из ПравилоВыгрузки Цикл
									
									Если Элемент.Ключ = ОбъектВыгрузки.Вид Тогда
										
										Подстановка = "Документ";
										
										Если СтрНайти(ПравилоВыгрузки[Элемент.Ключ], "СписокДокументов") > 0 Тогда
											
											Подстановка = "СписокДокументов." + Подстановка;
											
										КонецЕсли;
										
										ПравилоВыгрузки[Элемент.Ключ] = ПравилоВыгрузки[Элемент.Ключ] + " " + ?(Условие, "И", "ИЛИ") + " (НачалоПериода(" + Подстановка + ".Дата, ДЕНЬ) = ДАТАВРЕМЯ(" + СтрЗаменить(Строка(Год(ОбъектВыгрузки.Дата)), Символы.НПП, "") + ", " + СтрЗаменить(Строка(Месяц(ОбъектВыгрузки.Дата)), Символы.НПП, "") + ", " + СтрЗаменить(Строка(День(ОбъектВыгрузки.Дата)), Символы.НПП, "") +")" + " И " + Подстановка + ".Номер = """ + ОбъектВыгрузки.Номер + """)";
										
										Условие = Ложь;
										
									КонецЕсли;
									
								КонецЦикла;
								
							КонецЦикла;
							
						КонецЦикла;
						
					КонецЕсли;
					
					ЗаписьJSON = Новый ЗаписьJSON;
					
					ЗаписьJSON.УстановитьСтроку(Новый ПараметрыЗаписиJSON(, Символы.Таб));
					
					ЗаписатьJSON(ЗаписьJSON, ПравилаВыгрузки); 
					
					Возврат ЗаписьJSON.Закрыть();
					
				КонецЕсли;
				
				Возврат Настройки.ПравилаВыгрузки;
				
			Иначе
				
				ВызватьИсключение "Не заполнены правила выгрузки";
				
			КонецЕсли;
			
		Иначе
			
			ВызватьИсключение "Не найдены правила выгрузки";
			
		КонецЕсли;
		
	КонецЕсли;
	
	ВызватьИсключение "Нет базы для выполнения обмена";
	
КонецФункции
//*****************************************************************************
Функция ЗагрузитьПравила(Настройки) Экспорт
	
	Если Настройки.Свойство("ПравилаЗагрузки") Тогда
		
		Если ЗначениеЗаполнено(Настройки.ПравилаЗагрузки) Тогда
			
			ЧтениеJSON = Новый ЧтениеJSON;
			
			ЧтениеJSON.УстановитьСтроку(Настройки.ПравилаЗагрузки);
			
			ПравилаОбмена = ПрочитатьJSON(ЧтениеJSON);
			
			ЧтениеJSON.Закрыть();
			
			Возврат ПравилаОбмена;
			
		Иначе
			
			ВызватьИсключение "Не заполнены правила загрузки";
			
		КонецЕсли;
		
	Иначе
		
		ВызватьИсключение "Не найдены правила загрузки";
		
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции
//*****************************************************************************

//*****************************************************************************
Функция ЭтоСправочник(Данные)
	
	Тип = Метаданные.НайтиПоТипу(ТипЗнч(Данные));
	
	Если Тип <> Неопределено Тогда
		
		Если Метаданные.Справочники.Содержит(Тип) Тогда
			
			Возврат Истина;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции
//*****************************************************************************
Функция ЭтоДокумент(Данные)
	
	Тип = Метаданные.НайтиПоТипу(ТипЗнч(Данные));
	
	Если Тип <> Неопределено Тогда
		
		Если Метаданные.Документы.Содержит(Тип) Тогда
			
			Возврат Истина;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции
//*****************************************************************************
Функция ПолучитьДанныеПоСсылке(Ссылка, Данные)
	
	Если Ссылка.Тип = "Справочник" Тогда
		
		Для А = 0 По Данные["Справочники"].Количество() - 1 Цикл
			
			Если Ссылка.UUID = Данные["Справочники"][А].Ссылка.UUID Тогда
				
				Возврат Данные["Справочники"][А];
				
			КонецЕсли;
			
		КонецЦикла;
		
	ИначеЕсли Ссылка.Тип = "Документ" Тогда
		
		Для А = 0 По Данные["Документы"].Количество() - 1 Цикл
			
			Если Ссылка.UUID = Данные["Документы"][А].Ссылка.UUID Тогда
				
				Возврат Данные["Документы"][А];
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции
//*****************************************************************************
Функция ПолучитьПредставлениеСсылки(Данные)
	
	Ссылка = Символы.ПС;
	
	Для Каждого Элемент Из Данные Цикл
		
		Если Элемент.Ключ = "ДополнительныеПараметры" Тогда
			
			Ссылка = Ссылка + Элемент.Ключ + ":" + Символы.ПС;
			
			Для Каждого ДополнительныйЭлемент Из Элемент.Значение Цикл
				
				Ссылка = Ссылка + Символы.Таб + ДополнительныйЭлемент.Ключ + ":" + ДополнительныйЭлемент.Значение + Символы.ПС;
				
			КонецЦикла;
			
		Иначе
			
			Ссылка = Ссылка + Элемент.Ключ + ":" + Элемент.Значение + Символы.ПС;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Ссылка;
	
КонецФункции
//*****************************************************************************
Функция ПустойОбъект(Ссылка)
	
	Возврат СтрНайти(Строка(Ссылка), "Объект не найден") > 0;
	
КонецФункции
//*****************************************************************************
Функция ПолучитьУсловиеПоРеквизиту(Вид, Тип, Реквизит)
	
	Попытка
		
		ТипРеквизита = Метаданные[Вид][Тип].Реквизиты[Реквизит].Тип;
		
		Если ТипРеквизита.СодержитТип(Тип("Строка")) Тогда
			
			Если ТипРеквизита.КвалификаторыСтроки.Длина = 0 Тогда
				
				Возврат " ПОДОБНО ";
				
			КонецЕсли;
			
		КонецЕсли;
		
	Исключение
		
	КонецПопытки;
	
	Возврат " = ";
	
КонецФункции
//*****************************************************************************
Функция ПолучитьВидПоПравилу(Правило)
	
	Если Правило <> Неопределено Тогда
		
		Для Каждого Элемент Из Правило.Имя Цикл 
			
			Возврат Элемент.Значение;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции
//*****************************************************************************
Функция ЕстьОбъектВСоответствии(UUID)
	
	Возврат ПолучитьОбъектПоУникальномуИдентификатору(UUID) <> Неопределено;
	
КонецФункции
//*****************************************************************************
Процедура ДобавитьСоотвестствие(Ссылка, UUID)
	
	Если НЕ ЕстьОбъектВСоответствии(UUID) Тогда
		
		СоответствияОбъектовИнформационныхБаз = РегистрыСведений.СоответствияОбъектовИнформационныхБаз.СоздатьМенеджерЗаписи();
		
		СоответствияОбъектовИнформационныхБаз.ОбъектВыгруженПоСсылке					 = Истина;
		СоответствияОбъектовИнформационныхБаз.УзелИнформационнойБазы					 = ПланыОбмена.Полный.НайтиПоНаименованию("");
		СоответствияОбъектовИнформационныхБаз.УникальныйИдентификаторПриемника			 = UUID;
		СоответствияОбъектовИнформационныхБаз.УникальныйИдентификаторИсточника			 = Ссылка;
		СоответствияОбъектовИнформационныхБаз.УникальныйИдентификаторИсточникаСтрокой	 = UUID;
		
		СоответствияОбъектовИнформационныхБаз.Записать();
		
	КонецЕсли;
	
КонецПроцедуры
//*****************************************************************************
Функция ПолучитьОбъектПоУникальномуИдентификатору(UUID)
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	СоответствияОбъектовИнформационныхБаз.УникальныйИдентификаторИсточника КАК УникальныйИдентификаторИсточника
	|ИЗ
	|	РегистрСведений.СоответствияОбъектовИнформационныхБаз КАК СоответствияОбъектовИнформационныхБаз
	|ГДЕ
	|	СоответствияОбъектовИнформационныхБаз.УникальныйИдентификаторПриемника = &УникальныйИдентификаторПриемника");
	
	Запрос.УстановитьПараметр("УникальныйИдентификаторПриемника", UUID);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		
		Возврат Выборка.УникальныйИдентификаторИсточника;
		
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции
//*****************************************************************************
Функция ПолучитьСсылку(Данные, ТекущийОбъект, Правило)
	
	Вид = Неопределено;
	
	Ссылка = Ссылки.Получить(СокрЛП(Данные.UUID));
	
	Если Ссылка <> Неопределено Тогда
		
		Возврат Ссылка;
		
	КонецЕсли;
	
	Идентификатор = Новый УникальныйИдентификатор(СокрЛП(Данные.UUID));
	
	Если Данные.Тип = "Справочник" Тогда
		
		Вид = ПолучитьВидПоПравилу(Правило);
		
		Вид = ?(Вид = Неопределено, Данные.Вид, Вид);  
		
		Ссылка = Справочники[Вид].ПустаяСсылка();
		
		Если Правило <> Неопределено И Данные.UUID <> "00000000-0000-0000-0000-000000000000" Тогда
			
			Если Правило.Свойство("Поиск") Тогда
				
				Если Правило.Поиск = "Код" Тогда
					
					Ссылка = Справочники[Вид].НайтиПоКоду(ТекущийОбъект.Код);
					
				ИначеЕсли Правило.Поиск = "Наименование" Тогда
					
					Ссылка = Справочники[Вид].НайтиПоНаименованию(ТекущийОбъект.Наименование, Истина);
					
				ИначеЕсли Правило.Поиск = "УникальныйИдентификатор" Тогда
					
					Ссылка = ПолучитьОбъектПоУникальномуИдентификатору(Данные.UUID);
					
					Если Ссылка = Неопределено Тогда
						
						Ссылка = Справочники[Вид].ПолучитьСсылку(Идентификатор);
						
					КонецЕсли;
					
				Иначе
					
					Ссылка = ПолучитьСсылкуПоРеквизиту(Правило.Поиск, ТекущийОбъект[Правило.Поиск], ТекущийОбъект, Правило, Данные);
					
					Если Ссылка <> Неопределено Тогда
						
						ДобавитьСоотвестствие(Ссылка, Данные.UUID);
						
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если НЕ ПустойОбъект(Ссылка) И Ссылка <> Справочники[Вид].ПустаяСсылка() Тогда
			
			Ссылки.Вставить(СокрЛП(Данные.UUID), Ссылка);
			
		КонецЕсли;
		
	ИначеЕсли Данные.Тип = "Документ" Тогда
		
		Вид = ПолучитьВидПоПравилу(Правило);
		
		Вид = ?(Вид = Неопределено, Данные.Вид, Вид);  
		
		Ссылка = Документы[Вид].ПустаяСсылка();
		
		Если Правило <> Неопределено И Данные.UUID <> "00000000-0000-0000-0000-000000000000" Тогда
			
			Если Правило.Свойство("Поиск") Тогда
				
				Если Правило.Поиск = "Номер" Тогда
					
					Ссылка = Документы[Вид].НайтиПоНомеру(ТекущийОбъект.Номер, ТекущийОбъект.Дата);
					
				ИначеЕсли Правило.Поиск = "УникальныйИдентификатор" Тогда
					
					Ссылка = ПолучитьОбъектПоУникальномуИдентификатору(Данные.UUID);
					
					Если Ссылка = Неопределено Тогда
						
						Ссылка = Документы[Вид].ПолучитьСсылку(Идентификатор);
						
					КонецЕсли;
					
				КонецЕсли;
				
				Если НЕ ПустойОбъект(Ссылка) И Ссылка <> Документы[Вид].ПустаяСсылка() Тогда
					
					Ссылки.Вставить(СокрЛП(Данные.UUID), Ссылка);
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ПустойОбъект(Ссылка) Тогда
		
		Если Данные.Тип = "Справочник" Тогда
			
			Возврат Справочники[Вид].ПустаяСсылка();
			
		ИначеЕсли Данные.Тип = "Документ" Тогда
			
			Возврат Документы[Вид].ПустаяСсылка();
			
		КонецЕсли;
		
	Иначе
		
		Возврат Ссылка;
		
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции
//*****************************************************************************
Функция ПолучитьВид(Вид)
	
	Если Вид = "Справочник" Тогда
		
		Возврат "Справочники";
		
	ИначеЕсли Вид = "Документ" Тогда
		
		Возврат "Документы";
		
	КонецЕсли;
	
КонецФункции
//*****************************************************************************
Функция ПолучитьСсылкуПоРеквизиту(Реквизит, Значение, Данные, Правило, ДанныеОбъекта = Неопределено)
	
	Вид = ПолучитьВидПоПравилу(Правило);
	Тип = ?(ДанныеОбъекта = Неопределено, Данные.Тип, ДанныеОбъекта.Тип); 
	
	Условие = ПолучитьУсловиеПоРеквизиту(ПолучитьВид(Тип), Вид, Реквизит);
	
	ТекстЗапроса = "ВЫБРАТЬ ПЕРВЫЕ 1
	|	" + Вид + ".Ссылка КАК Ссылка
	|ИЗ
	|	" + Тип + "." + Вид + " КАК " + Вид + "
	|ГДЕ
	|	" + Вид + "." + Реквизит + Условие + "&Реквизит
	| И НЕ " + Вид + ".ЭтоГруппа
	| И НЕ " + Вид + ".ПометкаУдаления";
	
	Если ДанныеОбъекта = Неопределено Тогда
		
		Если Данные.Свойство("Тип") Тогда
			
			Если Данные.Тип = "Документ" Тогда
				
				ТекстЗапроса = ТекстЗапроса + Символы.ПС + " И " + Вид + ".Дата МЕЖДУ НАЧАЛОПЕРИОДА(&Дата, ГОД) И КОНЕЦПЕРИОДА(&Дата, ГОД)";
				
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		
		Если ДанныеОбъекта.Тип = "Документ" Тогда
			
			ТекстЗапроса = ТекстЗапроса + Символы.ПС + " И " + Вид + ".Дата МЕЖДУ НАЧАЛОПЕРИОДА(&Дата, ГОД) И КОНЕЦПЕРИОДА(&Дата, ГОД)";
			
		КонецЕсли;
		
	КонецЕсли;
	
	Запрос = Новый Запрос(ТекстЗапроса);
	
	Запрос.УстановитьПараметр("Реквизит", Значение);
	
	Если ДанныеОбъекта = Неопределено Тогда
		
		Если Данные.Свойство("Тип") Тогда
			
			Если Данные.Тип = "Документ" Тогда
				
				Запрос.УстановитьПараметр("Дата", Данные.ДополнительныеПараметры.Дата);
				
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		
		Если ДанныеОбъекта.Тип = "Документ" Тогда
			
			Запрос.УстановитьПараметр("Дата", Данные.ДополнительныеПараметры.Дата);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		
		Если Данные.Свойство("UUID") Тогда
			
			Ссылки.Вставить(СокрЛП(Данные.UUID), Выборка.Ссылка);
			
			ДобавитьСоотвестствие(Выборка.Ссылка, СокрЛП(Данные.UUID));
	
		Иначе
			
			Ссылки.Вставить(СокрЛП(Выборка.Ссылка.УникальныйИдентификатор()), Выборка.Ссылка);
			
			ДобавитьСоотвестствие(Выборка.Ссылка, ДанныеОбъекта.UUID);
	
		КонецЕсли;

		Возврат Выборка.Ссылка;
		
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции
//*****************************************************************************
Функция ПустаяСсылка(Данные, Ссылка, Правило)
	
	Вид = Неопределено;
	
	Если Ссылка = Неопределено Тогда
		
		Возврат Истина;
		
	КонецЕсли;
	
	Если Данные.Тип = "Справочник" Тогда
		
		Вид = ПолучитьВидПоПравилу(Правило);
		
		Вид = ?(Вид = Неопределено, Данные.Вид, Вид);  
		
		Возврат Ссылка = Справочники[Вид].ПустаяСсылка();
		
	ИначеЕсли Данные.Тип = "Документ" Тогда
		
		Вид = ПолучитьВидПоПравилу(Правило);
		
		Вид = ?(Вид = Неопределено, Данные.Вид, Вид);  
		
		Возврат Ссылка = Документы[Вид].ПустаяСсылка();
		
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции
//*****************************************************************************
Функция НайтиДанныеПоУникальномуИдентификатору(Знач Данные, Ссылка)
	
	Если ТипЗнч(Данные) = Тип("Массив") Тогда
		
		Для А = 0 По Данные.Количество() - 1 Цикл	
			
			Если Ссылка.Тип = "Справочник" Тогда
				
				Если Данные[А].Свойство("Справочники") Тогда
					
					Для Б = 0 По Данные[А].Справочники.Количество() - 1 Цикл	
						
						Для Каждого Элемент Из Данные[А].Справочники[Б] Цикл
							
							Если Элемент.Значение.Ссылка.UUID = Ссылка.UUID Тогда  
								
								Возврат Элемент.Значение;
								
							КонецЕсли;
							
						КонецЦикла;
						
					КонецЦикла;
					
				КонецЕсли;
				
			ИначеЕсли Ссылка.Тип = "Документ" Тогда
				
				Если Данные[А].Свойство("Документы") Тогда
					
					Для Б = 0 По Данные[А].Документы.Количество() - 1 Цикл	
						
						Для Каждого Элемент Из Данные[А].Документы[Б] Цикл
							
							Если Элемент.Значение.Ссылка.UUID = Ссылка.UUID Тогда  
								
								Возврат Элемент.Значение;
								
							КонецЕсли;
							
						КонецЦикла;
						
					КонецЦикла;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции
//*****************************************************************************
Функция НовыйОбъект(Данные, Правило)
	
	Вид = Неопределено;
	
	Если Данные.Ссылка.Тип = "Справочник" Тогда
		
		Вид = ПолучитьВидПоПравилу(Правило);
		
		Вид = ?(Вид = Неопределено, Данные.Вид, Вид);  
		
		Возврат ?(Данные.ЭтоГруппа, Справочники[Вид].СоздатьГруппу(), Справочники[Вид].СоздатьЭлемент());
		
	ИначеЕсли Данные.Ссылка.Тип = "Документ" Тогда
		
		Вид = ПолучитьВидПоПравилу(Правило);
		
		Вид = ?(Вид = Неопределено, Данные.Вид, Вид);  
		
		Возврат Документы[Вид].СоздатьДокумент();
		
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции
//*****************************************************************************
Процедура УстановитьЗначение(Знач Данные, ТекущийОбъект, Реквизит, Значение)
	
	Если ТипЗнч(Значение) = Тип("Строка") И ТипЗнч(ТекущийОбъект[Реквизит]) = Тип("Строка") Тогда
		
		ТекущийОбъект[Реквизит] = Значение;
		
	ИначеЕсли ТипЗнч(Значение) = Тип("Дата") И ТипЗнч(ТекущийОбъект[Реквизит]) = Тип("Дата") Тогда
		
		ТекущийОбъект[Реквизит] = Значение;
		
	ИначеЕсли ТипЗнч(Значение) = Тип("Число") И ТипЗнч(ТекущийОбъект[Реквизит]) = Тип("Число") Тогда
		
		ТекущийОбъект[Реквизит] = Значение;
		
	ИначеЕсли ТипЗнч(Значение) = Тип("Булево") И ТипЗнч(ТекущийОбъект[Реквизит]) = Тип("Булево") Тогда
		
		ТекущийОбъект[Реквизит] = Значение;
		
	ИначеЕсли (ТипЗнч(Значение) = Тип("Структура") И (ТипЗнч(ТекущийОбъект[Реквизит]) = Тип(Значение.Тип + "Ссылка." + ПолучитьВидПоПравилу(ПолучитьПравилоОбменаОбъекта(Значение.Тип, Значение.Вид))) 
		ИЛИ ТекущийОбъект.Метаданные().Реквизиты[Реквизит].Тип.СодержитТип(Тип(Значение.Тип + "Ссылка." + ПолучитьВидПоПравилу(ПолучитьПравилоОбменаОбъекта(Значение.Тип, Значение.Вид)))))) Тогда
		
		Правило = ПолучитьПравилоОбменаОбъекта(Значение.Тип, Значение.Вид);
		
		ОбъектПоиска = НайтиДанныеПоУникальномуИдентификатору(Данные, Значение);
		
		Если ОбъектПоиска <> Неопределено Тогда
			
			Ссылка = ПолучитьСсылку(Значение, ОбъектПоиска, Правило);
			
			Если ПустаяСсылка(Значение, Ссылка, Правило) Тогда
				
				Если Значение.Тип = "Справочник" Тогда
					
					Если Правило.Поиск <> "Идентификатор" Тогда
						
						Ссылка = ПолучитьСсылкуПоРеквизиту(Правило.Поиск, Значение.ДополнительныеПараметры[Правило.Поиск], Значение, Правило);
						
					КонецЕсли;
					
				ИначеЕсли Значение.Тип = "Документ" Тогда
					
					Если Правило.Поиск <> "Идентификатор" Тогда
						
						Ссылка = ПолучитьСсылкуПоРеквизиту(Правило.Поиск, Значение.ДополнительныеПараметры[Правило.Поиск], Значение, Правило);	
						
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
			
			ТекущийОбъект[Реквизит] = Ссылка;
			
		Иначе
			
			Если Значение.Тип = "Справочник" Тогда
				
				Ссылка = Справочники[Значение.Вид].ПустаяСсылка();
				
			ИначеЕсли Значение.Тип = "Документ" Тогда
				
				Ссылка = Документы[Значение.Вид].ПустаяСсылка();
				
			КонецЕсли;
			
			ТекущийОбъект[Реквизит] = Ссылка;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры
//*****************************************************************************
Функция ПолучитьПравилоОбменаОбъекта(Тип, Имя)
	
	Для А = 0 По ПравилаОбмена.Количество() - 1 Цикл
		
		Если ПравилаОбмена[А].Свойство(Тип) Тогда
			
			Для Каждого Элемент Из ПравилаОбмена[А][Тип]["Имя"] Цикл
				
				Если Элемент.Ключ = Имя Тогда
					
					Возврат ПравилаОбмена[А][Тип];
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции
//*****************************************************************************
Процедура ЗагрузитьОбъект(Параметры, Настройки, Данные, JSON, Знач ВсеДанные)
	
	НачатьТранзакцию();
	
	Попытка
		
		Правило = ПолучитьПравилоОбменаОбъекта(Данные.Ссылка.Тип, Данные.Ссылка.Вид);
		
		Если Правило = Неопределено Тогда
			
			ОтменитьТранзакцию();
			
			Возврат;
			
		КонецЕсли;
		
		Ссылка = ПолучитьСсылку(Данные.Ссылка, Данные, Правило);
		
		ТекущийОбъект = ?(ПустаяСсылка(Данные.Ссылка, Ссылка, Правило), НовыйОбъект(Данные, Правило), Ссылка.ПолучитьОбъект());
		
		Если ТекущийОбъект = Неопределено Тогда
			
			Возврат;
			
		КонецЕсли;

		Отказ = Ложь;
		
		Если Правило.Свойство("ПриСоздании") Тогда
			
			Если ЗначениеЗаполнено(Правило.ПриСоздании) Тогда
				
				Выполнить(Правило.ПриСоздании);
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если Отказ Тогда
			
			ОтменитьТранзакцию();
			
			Возврат;
			
		КонецЕсли;
		
		Для Каждого Реквизит Из Правило.Реквизиты Цикл
			
			Для Каждого ДанныеРеквизита Из Реквизит Цикл
				
				УстановитьЗначение(ВсеДанные, ТекущийОбъект, ДанныеРеквизита.Значение, Данные[ДанныеРеквизита.Ключ]);
				
			КонецЦикла;
			
		КонецЦикла;
		
		Если Правило.Свойство("ПослеСоздания") Тогда
			
			Если ЗначениеЗаполнено(Правило.ПослеСоздания) Тогда
				
				Выполнить(Правило.ПослеСоздания);
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если Отказ Тогда
			
			ОтменитьТранзакцию();
			
			Возврат;
			
		КонецЕсли;
		
		Для Каждого ТабличнаяЧасть Из Правило.ТабличныеЧасти Цикл
			
			Для Каждого Элемент Из ТабличнаяЧасть.Имя Цикл
				
				ТекущийОбъект[Элемент.Ключ].Очистить();
				
				Для А = 0 По Данные["ТабличныеЧасти"][Элемент.Ключ].Количество() - 1 Цикл 
					
					НоваяСтрока = ТекущийОбъект[Элемент.Ключ].Добавить();
					
					Если ТабличнаяЧасть.Свойство("ПередОбработкой") Тогда
						
						Если ЗначениеЗаполнено(ТабличнаяЧасть.ПередОбработкой) Тогда
							
							Выполнить(ТабличнаяЧасть.ПередОбработкой);
							
						КонецЕсли;
						
						Если Отказ Тогда
							
							ОтменитьТранзакцию();
							
							Возврат;
							
						КонецЕсли;
						
					КонецЕсли;
					
					Для Каждого Реквизит Из ТабличнаяЧасть.Реквизиты Цикл
						
						Для Каждого ЭлементРеквизита Из Реквизит Цикл
							
							УстановитьЗначение(ВсеДанные, НоваяСтрока, ЭлементРеквизита.Значение, Данные["ТабличныеЧасти"][Элемент.Ключ][А][ЭлементРеквизита.Ключ]);
							
						КонецЦикла;
						
					КонецЦикла;
					
					Если ТабличнаяЧасть.Свойство("ПослеОбработки") Тогда
						
						Если ЗначениеЗаполнено(ТабличнаяЧасть.ПослеОбработки) Тогда
							
							Выполнить(ТабличнаяЧасть.ПослеОбработки);
							
						КонецЕсли;
						
						Если Отказ Тогда
							
							ОтменитьТранзакцию();
							
							Возврат;
							
						КонецЕсли;
						
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЦикла;
			
		КонецЦикла;
		
		Если Правило.Свойство("ПередЗаписью") Тогда
			
			Если ЗначениеЗаполнено(Правило.ПередЗаписью) Тогда
				
				Выполнить(Правило.ПередЗаписью);
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если Отказ Тогда
			
			ОтменитьТранзакцию();
			
			Возврат;
			
		КонецЕсли;
		
		Если Данные.Ссылка.Тип = "Справочник" Тогда
			
			Если Правило.Поиск = "УникальныйИдентификатор" Тогда 
				
				Если Строка(ТекущийОбъект.Ссылка.УникальныйИдентификатор()) <> Данные.Ссылка.UUID Тогда 
					
					Вид = ПолучитьВидПоПравилу(Правило);
					
					Вид = ?(Вид = Неопределено, Данные.Вид, Вид);  
					
					ТекущийОбъект.УстановитьСсылкуНового(Справочники[Вид].ПолучитьСсылку(Новый УникальныйИдентификатор(Данные.Ссылка.UUID)));
					
				КонецЕсли;
				
			КонецЕсли;
			
			ТекущийОбъект.Записать();
			
		ИначеЕсли Данные.Ссылка.Тип = "Документ" Тогда
			
			Если Правило.Поиск = "УникальныйИдентификатор" Тогда 
				
				Если Строка(ТекущийОбъект.Ссылка.УникальныйИдентификатор()) <> Данные.Ссылка.UUID Тогда 
					
					Вид = ПолучитьВидПоПравилу(Правило);
					
					Вид = ?(Вид = Неопределено, Данные.Вид, Вид); 
					
					ТекущийОбъект.УстановитьСсылкуНового(Документы[Вид].ПолучитьСсылку(Новый УникальныйИдентификатор(Данные.Ссылка.UUID)));
					
				КонецЕсли;
				
			КонецЕсли;
			
			Если Параметры.Проведение Тогда
				
				Попытка
					
					ТекущийОбъект.Записать(РежимЗаписиДокумента.Проведение);
					
				Исключение
					
					ВывестиСообщение("Не удалось провести документ: " + Строка(ТекущийОбъект));
					
					ТекущийОбъект.Записать();
					
					ДобавитьСоотвестствие(ТекущийОбъект.Ссылка, Данные.Ссылка.UUID);
					
				КонецПопытки;
				
			Иначе
				
				ТекущийОбъект.Записать();
				
				ДобавитьСоотвестствие(ТекущийОбъект.Ссылка, Данные.Ссылка.UUID);
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если Правило.Свойство("ПослеЗаписи") Тогда
			
			Если ЗначениеЗаполнено(Правило.ПослеЗаписи) Тогда
				
				Выполнить(Правило.ПослеЗаписи);
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если Отказ Тогда
			
			ОтменитьТранзакцию();
			
			Возврат;
			
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		Текст = "Ошибка загрузки объекта: " + ПолучитьПредставлениеСсылки(Данные.Ссылка) + Символы.ПС + ОписаниеОшибки();
		
		Обработка = Обработки.Telegram_Обработка.Создать();
		
		Обработка.Сообщение(Параметры.База + ": "+ Символы.ПС + Текст);
		
		ВывестиСообщение(Текст);
		
		ОтменитьТранзакцию();
		
	КонецПопытки;
	
КонецПроцедуры
//*****************************************************************************
Процедура ЗагрузитьОбъекты(Параметры, Настройки, Данные, JSON, Знач ВсеДанные)
	
	Для А = 0 По Данные.Количество() - 1 Цикл
		
		Для Каждого Элемент Из Данные[А] Цикл
			
			ЗагрузитьОбъект(Параметры, Настройки, Данные[А][Элемент.Ключ], JSON, ВсеДанные);
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры
//*****************************************************************************