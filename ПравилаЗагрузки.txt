[
	{
		"Документ": {
			"Имя": { "РеализацияТоваровУслуг": "РеализацияТоваровУслуг" },
			"Синоним": { "РеализацияТоваровУслуг": "Реализация товаров и услуг" },
			"Поиск": "УникальныйИдентификатор",
			"ПриСоздании": "     
				Отказ = Exchange_Обмен.ЕстьЭСФ(ТекущийОбъект.Ссылка) ИЛИ Exchange_Обмен.ПропускатьЗагруженныеДокументы(ТекущийОбъект, Параметры.ПропускатьЗагруженные);	

				ЗаполнениеДокументов.ЗаполнитьШапкуДокумента(ТекущийОбъект, ОбщегоНазначенияБКВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета(), \"Продажа\");
			",
			"Реквизиты": [  
				{ "Дата": "Дата" },
				{ "Номер": "Номер" },
				{ "Контрагент": "Контрагент" }
			],  
			"ПослеСоздания": "
				ТекущийОбъект.Склад						 = Справочники.Склады.НайтиПоНаименованию(\"Основной склад\");
				ТекущийОбъект.ВидУчетаНУ				 = Справочники.ВидыУчетаНУ.НУ;
				ТекущийОбъект.УчитыватьНДС				 = Истина;
				ТекущийОбъект.УчитыватьКПН				 = Истина;
				ТекущийОбъект.СуммаВключаетНДС			 = Истина;
				ТекущийОбъект.КурсВзаиморасчетов		 = 1;
				ТекущийОбъект.КратностьВзаиморасчетов	 = 1;

				Если ЗначениеЗаполнено(ТекущийОбъект.Контрагент) Тогда
				
					ТекущийОбъект.ДоговорКонтрагента = ТекущийОбъект.Контрагент.ОсновнойДоговорКонтрагента;
					
				КонецЕсли;
			
				ТекущийОбъект.Товары.Очистить();
				ТекущийОбъект.Услуги.Очистить();
				ТекущийОбъект.НомераГТД.Очистить();
			",
			"ТабличныеЧасти": [ {
				"Имя": { "Товары": "Товары" },
				"ПередОбработкой": "",
				"Реквизиты": [  
					{ "Цена": "Цена" },
					{ "Сумма": "Сумма" },
					{ "СуммаНДС": "СуммаНДС" },
					{ "СтавкаНДС": "СтавкаНДС" },
					{ "Количество": "Количество" },
					{ "Номенклатура": "Номенклатура" }],
				"ПослеОбработки": " 
					НоваяСтрока.Коэффициент = 1;
				" 
				},{
				"Имя": { "Услуги": "Услуги" },
				"ПередОбработкой": "",
				"Реквизиты": [  
					{ "Цена": "Цена" },
					{ "Сумма": "Сумма" },
					{ "СуммаНДС": "СуммаНДС" },
					{ "СтавкаНДС": "СтавкаНДС" },
					{ "Количество": "Количество" },
					{ "Номенклатура": "Номенклатура" }],
				"ПослеОбработки": " 
					НоваяСтрока.Содержание = Строка(НоваяСтрока.Номенклатура);
				" 
				}
			],
			"ПередЗаписью": "
				Документы.РеализацияТоваровУслуг.ЗаполнитьСчетаУчетаРасчетов(ТекущийОбъект);

				ДанныеОбъекта = Новый Структура(\"Организация, СтруктурноеПодразделение, ВидОперации, Дата, Ссылка, ВидУчетаНУ, ТипЦен, 
				|УчитыватьКПН, УчитыватьНДС, УчитыватьАкциз, СуммаВключаетНДС, СуммаВключаетАкциз,  
				|ВалютаДокумента, КурсВзаиморасчетов, КратностьВзаиморасчетов, Склад, ДоговорКонтрагента\");

				ЗаполнитьЗначенияСвойств(ДанныеОбъекта, ТекущийОбъект);

				ВедетсяУчетПоПодразделениям = ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.НаСчетеВедетсяУчетПоПодразделениям(ПланыСчетов.Типовой.ДоходОтРеализацииПродукцииИОказанияУслуг_);

				Если ВедетсяУчетПоПодразделениям Тогда
					
					Подразделение = Справочники.ПодразделенияОрганизаций.НайтиПоНаименованию(\"Основное подразделение\", Истина);

				КонецЕсли;

				СтатьяЗатрат		 = Справочники.СтатьиЗатрат.НайтиПоНаименованию(\"Себестоимость товара\", Истина);
				ДоходОтРеализации	 = Справочники.Доходы.НайтиПоНаименованию(\"Доход от реализации продукции и оказания услуг\", Истина);
				НоменклатурнаяГруппа = Справочники.НоменклатурныеГруппы.НайтиПоНаименованию(\"Основная номенклатурная группа\", Истина);

				Для Каждого Стр Из ТекущийОбъект.Товары Цикл

					Документы.РеализацияТоваровУслуг.ЗаполнитьСчетаУчетаВСтрокеТабличнойЧасти(ДанныеОбъекта, Стр, \"Товары\", ОбработкаТабличныхЧастей.ПолучитьСведенияОНоменклатуре(Стр.Номенклатура, ДанныеОбъекта));
					
					Стр.КлючСвязи = ОбщегоНазначенияБККлиентСервер.НовыйКлючСвязиСтрокиТаблицы(ТекущийОбъект.Товары);

					Стр.НДСВидОперацииРеализации = Справочники.ВидыРеализации.РеализацияТМЗ;
					
					//6010
					Стр.СубконтоДоходовБУ1 = ДоходОтРеализации;
					Стр.СубконтоДоходовБУ2 = НоменклатурнаяГруппа; 	
					
					Если ВедетсяУчетПоПодразделениям Тогда
					
						Стр.СубконтоДоходовБУ3 = Подразделение; 	
						
					КонецЕсли;	
					
					//6010Н
					Стр.СубконтоДоходовНУ1 = ДоходОтРеализации; 
					Стр.СубконтоДоходовНУ2 = Стр.Номенклатура;
					
					//7010
					Стр.СубконтоСписанияСебестоимостиБУ1 = СтатьяЗатрат;
					Стр.СубконтоСписанияСебестоимостиБУ2 = НоменклатурнаяГруппа; 
					
					Если ВедетсяУчетПоПодразделениям Тогда
						
						Стр.СубконтоСписанияСебестоимостиБУ3 = Подразделение; 	
						
					КонецЕсли;
					
					//7000Н
					Стр.СубконтоСписанияСебестоимостиНУ1 = СтатьяЗатрат;
					Стр.СубконтоСписанияСебестоимостиНУ2 = НоменклатурнаяГруппа;
					
				КонецЦикла;

				Для Каждого Стр Из ТекущийОбъект.Услуги Цикл

					Документы.РеализацияТоваровУслуг.ЗаполнитьСчетаУчетаВСтрокеТабличнойЧасти(ДанныеОбъекта, Стр, \"Услуги\", ОбработкаТабличныхЧастей.ПолучитьСведенияОНоменклатуре(Стр.Номенклатура, ДанныеОбъекта));

					Стр.НДСВидОперацииРеализации  = Справочники.ВидыРеализации.РеализацияТМЗ;
					
					//6010
					Стр.СубконтоДоходовБУ1 = ДоходОтРеализации;
					Стр.СубконтоДоходовБУ2 = НоменклатурнаяГруппа;
					
					Если ВедетсяУчетПоПодразделениям Тогда
						
						Стр.СубконтоДоходовБУ3 = Подразделение;
						
					КонецЕсли;

					//6010Н
					Стр.СубконтоДоходовНУ1 = ДоходОтРеализации; 
					Стр.СубконтоДоходовНУ2 = Стр.Номенклатура;
					
				КонецЦикла; 
					
				ТекущийОбъект.УстановитьНовыйНомер(\"0\");
			",
			"ПослеЗаписи": "
				СчетФактураВыданный = Exchange_Обмен.ПолучитьСчетФактуру(ТекущийОбъект.Ссылка);
				
				СчетФактураВыданный.Товары.Очистить();
				СчетФактураВыданный.Услуги.Очистить();
				СчетФактураВыданный.ДокументыОснования.Очистить();

				СчетФактураВыданный.Заполнить(ТекущийОбъект.Ссылка);
	
				СчетФактураВыданный.Записать(РежимЗаписиДокумента.Запись);
			"
		}
	}, {
		"Документ": {
			"Имя": { "СводнаяРеализация": "РеализацияТоваровУслуг" },
			"Синоним": { "СводнаяРеализация": "Сводная реализация товаров и услуг" },
			"Поиск": "УникальныйИдентификатор",
			"ПриСоздании": "
				Отказ = Exchange_Обмен.ЕстьЭСФ(ТекущийОбъект.Ссылка) ИЛИ Exchange_Обмен.ПропускатьЗагруженныеДокументы(ТекущийОбъект, Параметры.ПропускатьЗагруженные);	

				ЗаполнениеДокументов.ЗаполнитьШапкуДокумента(ТекущийОбъект, ОбщегоНазначенияБКВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета(), \"Продажа\");
			",
			"Реквизиты": [  
				{ "Дата": "Дата" },
				{ "Номер": "Номер" },
				{ "Контрагент": "Контрагент" }
			],
			"ПослеСоздания": "
				ТекущийОбъект.Склад						 = Справочники.Склады.НайтиПоНаименованию(\"Основной склад\");
				ТекущийОбъект.ВидУчетаНУ				 = Справочники.ВидыУчетаНУ.НУ;
				ТекущийОбъект.УчитыватьНДС				 = Истина;
				ТекущийОбъект.УчитыватьКПН				 = Истина;
				ТекущийОбъект.СуммаВключаетНДС			 = Истина;
				ТекущийОбъект.КурсВзаиморасчетов		 = 1;
				ТекущийОбъект.КратностьВзаиморасчетов	 = 1;

				Если ЗначениеЗаполнено(ТекущийОбъект.Контрагент) Тогда
				
					ТекущийОбъект.ДоговорКонтрагента = ТекущийОбъект.Контрагент.ОсновнойДоговорКонтрагента;
					
				КонецЕсли;
			
				ТекущийОбъект.Товары.Очистить();
				ТекущийОбъект.Услуги.Очистить();
				ТекущийОбъект.НомераГТД.Очистить();
			",
			"ТабличныеЧасти": [ {
				"Имя": { "Товары": "Товары" },
				"ПередОбработкой": "",
				"Реквизиты": [  
					{ "Цена": "Цена" },
					{ "Сумма": "Сумма" },
					{ "СуммаНДС": "СуммаНДС" },
					{ "СтавкаНДС": "СтавкаНДС" },
					{ "Количество": "Количество" },
					{ "Номенклатура": "Номенклатура" }],
				"ПослеОбработки": " 
					НоваяСтрока.Коэффициент = 1;
				" 
				}, {
				"Имя": { "Услуги": "Услуги" },
				"ПередОбработкой": "",
				"Реквизиты": [  
					{ "Цена": "Цена" },
					{ "Сумма": "Сумма" },
					{ "СуммаНДС": "СуммаНДС" },
					{ "СтавкаНДС": "СтавкаНДС" },
					{ "Количество": "Количество" },
					{ "Номенклатура": "Номенклатура" }],
				"ПослеОбработки": " 
					НоваяСтрока.Содержание = Строка(НоваяСтрока.Номенклатура);
				" 
				}
			],
			"ПередЗаписью": "
				Документы.РеализацияТоваровУслуг.ЗаполнитьСчетаУчетаРасчетов(ТекущийОбъект);

				ДанныеОбъекта = Новый Структура(\"Организация, СтруктурноеПодразделение, ВидОперации, Дата, Ссылка, ВидУчетаНУ, ТипЦен, 
				|УчитыватьКПН, УчитыватьНДС, УчитыватьАкциз, СуммаВключаетНДС, СуммаВключаетАкциз,  
				|ВалютаДокумента, КурсВзаиморасчетов, КратностьВзаиморасчетов, Склад, ДоговорКонтрагента\");

				ЗаполнитьЗначенияСвойств(ДанныеОбъекта, ТекущийОбъект);

				ВедетсяУчетПоПодразделениям = ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.НаСчетеВедетсяУчетПоПодразделениям(ПланыСчетов.Типовой.ДоходОтРеализацииПродукцииИОказанияУслуг_);

				Если ВедетсяУчетПоПодразделениям Тогда
					
					Подразделение = Справочники.ПодразделенияОрганизаций.НайтиПоНаименованию(\"Основное подразделение\", Истина);

				КонецЕсли;

				СтатьяЗатрат		 = Справочники.СтатьиЗатрат.НайтиПоНаименованию(\"Себестоимость товара\", Истина);
				ДоходОтРеализации	 = Справочники.Доходы.НайтиПоНаименованию(\"Доход от реализации продукции и оказания услуг\", Истина);
				НоменклатурнаяГруппа = Справочники.НоменклатурныеГруппы.НайтиПоНаименованию(\"Основная номенклатурная группа\", Истина);

				Для Каждого Стр Из ТекущийОбъект.Товары Цикл

					Документы.РеализацияТоваровУслуг.ЗаполнитьСчетаУчетаВСтрокеТабличнойЧасти(ДанныеОбъекта, Стр, \"Товары\", ОбработкаТабличныхЧастей.ПолучитьСведенияОНоменклатуре(Стр.Номенклатура, ДанныеОбъекта));
					
					Стр.КлючСвязи = ОбщегоНазначенияБККлиентСервер.НовыйКлючСвязиСтрокиТаблицы(ТекущийОбъект.Товары);

					Стр.НДСВидОперацииРеализации = Справочники.ВидыРеализации.РеализацияТМЗ;
					
					//6010
					Стр.СубконтоДоходовБУ1 = ДоходОтРеализации;
					Стр.СубконтоДоходовБУ2 = НоменклатурнаяГруппа; 	
					
					Если ВедетсяУчетПоПодразделениям Тогда
					
						Стр.СубконтоДоходовБУ3 = Подразделение; 	
						
					КонецЕсли;	
					
					//6010Н
					Стр.СубконтоДоходовНУ1 = ДоходОтРеализации; 
					Стр.СубконтоДоходовНУ2 = Стр.Номенклатура;
					
					//7010
					Стр.СубконтоСписанияСебестоимостиБУ1 = СтатьяЗатрат;
					Стр.СубконтоСписанияСебестоимостиБУ2 = НоменклатурнаяГруппа; 
					
					Если ВедетсяУчетПоПодразделениям Тогда
						
						Стр.СубконтоСписанияСебестоимостиБУ3 = Подразделение; 	
						
					КонецЕсли;
					
					//7000Н
					Стр.СубконтоСписанияСебестоимостиНУ1 = СтатьяЗатрат;
					Стр.СубконтоСписанияСебестоимостиНУ2 = НоменклатурнаяГруппа;
					
				КонецЦикла;

				Для Каждого Стр Из ТекущийОбъект.Услуги Цикл

					Документы.РеализацияТоваровУслуг.ЗаполнитьСчетаУчетаВСтрокеТабличнойЧасти(ДанныеОбъекта, Стр, \"Услуги\", ОбработкаТабличныхЧастей.ПолучитьСведенияОНоменклатуре(Стр.Номенклатура, ДанныеОбъекта));

					Стр.НДСВидОперацииРеализации  = Справочники.ВидыРеализации.РеализацияТМЗ;
					
					//6010
					Стр.СубконтоДоходовБУ1 = ДоходОтРеализации;
					Стр.СубконтоДоходовБУ2 = НоменклатурнаяГруппа;
					
					Если ВедетсяУчетПоПодразделениям Тогда
						
						Стр.СубконтоДоходовБУ3 = Подразделение;
						
					КонецЕсли;

					//6010Н
					Стр.СубконтоДоходовНУ1 = ДоходОтРеализации; 
					Стр.СубконтоДоходовНУ2 = Стр.Номенклатура;
					
				КонецЦикла;
				
				Exchange_Обмен.УстановитьНовыйНомер(ТекущийОбъект, \"РеализацияТоваровУслуг\");
			",
			"ПослеЗаписи": "
				СчетФактураВыданный = Exchange_Обмен.ПолучитьСчетФактуру(ТекущийОбъект.Ссылка);
				
				СчетФактураВыданный.Товары.Очистить();
				СчетФактураВыданный.Услуги.Очистить();
				СчетФактураВыданный.ДокументыОснования.Очистить();

				СчетФактураВыданный.Заполнить(ТекущийОбъект.Ссылка);
	
				СчетФактураВыданный.Записать(РежимЗаписиДокумента.Запись);
			"
		}
	}, {
		"Документ": {
			"Имя": { "ВозвратТоваровОтПокупателя": "ВозвратТоваровОтПокупателя" },
			"Синоним": { "ВозвратТоваровОтПокупателя": "Возврат товаров от покупателя" },
			"Поиск": "УникальныйИдентификатор",
			"ПриСоздании": "
				Отказ = Exchange_Обмен.ЕстьЭСФ(ТекущийОбъект.Ссылка) ИЛИ Exchange_Обмен.ПропускатьЗагруженныеДокументы(ТекущийОбъект, Параметры.ПропускатьЗагруженные);	

				ЗаполнениеДокументов.ЗаполнитьШапкуДокумента(ТекущийОбъект, ОбщегоНазначенияБКВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета(), \"Продажа\");
			",
			"Реквизиты": [  
				{ "Дата": "Дата" },
				{ "Номер": "Номер" },
				{ "Контрагент": "Контрагент" },
				{ "ДокументОснование": "ДокументОснование" }
			],
			"ПослеСоздания": "
				ТекущийОбъект.Склад						 = Справочники.Склады.НайтиПоНаименованию(\"Основной склад\");
				ТекущийОбъект.ВидУчетаНУ				 = Справочники.ВидыУчетаНУ.НУ;
				ТекущийОбъект.УчитыватьКПН				 = Истина;
				ТекущийОбъект.УчитыватьНДС				 = Истина;
				ТекущийОбъект.СуммаВключаетНДС			 = Истина;
				ТекущийОбъект.КурсВзаиморасчетов		 = 1;
				ТекущийОбъект.КратностьВзаиморасчетов	 = 1;

				Если ЗначениеЗаполнено(ТекущийОбъект.Контрагент) Тогда
				
					ТекущийОбъект.ДоговорКонтрагента = ТекущийОбъект.Контрагент.ОсновнойДоговорКонтрагента;
					
				КонецЕсли;
			
				ТекущийОбъект.Товары.Очистить();
				ТекущийОбъект.Услуги.Очистить();
				ТекущийОбъект.НомераГТД.Очистить();
			",
			"ТабличныеЧасти": [ {
				"Имя": { "Товары": "Товары" },
				"ПередОбработкой": "",
				"Реквизиты": [  
					{ "Цена": "Цена" },
					{ "Сумма": "Сумма" },
					{ "СуммаНДС": "СуммаНДС" },
					{ "СтавкаНДС": "СтавкаНДС" },
					{ "Количество": "Количество" },
					{ "Номенклатура": "Номенклатура" }],
				"ПослеОбработки": " 
					НоваяСтрока.Коэффициент = 1;
				" 
				}
			],
			"ПередЗаписью": "
				ТекущийОбъект.ДокументОснование = Документы.РеализацияТоваровУслуг.ПолучитьСсылку(Новый УникальныйИдентификатор(Данные.ДокументОснование.UUID));

				Документы.ВозвратТоваровОтПокупателя.ЗаполнитьСчетаУчетаРасчетов(ТекущийОбъект);

				ДанныеОбъекта = Новый Структура(\"Организация, СтруктурноеПодразделение, ВидОперации, Дата, Ссылка, ВидУчетаНУ, ТипЦен, 
				|УчитыватьКПН, УчитыватьНДС, УчитыватьАкциз, СуммаВключаетНДС, СуммаВключаетАкциз,  
				|ВалютаДокумента, КурсВзаиморасчетов, КратностьВзаиморасчетов, Склад, ДоговорКонтрагента\");

				ЗаполнитьЗначенияСвойств(ДанныеОбъекта, ТекущийОбъект);

				ВедетсяУчетПоПодразделениям = ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.НаСчетеВедетсяУчетПоПодразделениям(ПланыСчетов.Типовой.ДоходОтРеализацииПродукцииИОказанияУслуг_);

				Если ВедетсяУчетПоПодразделениям Тогда
					
					Подразделение = Справочники.ПодразделенияОрганизаций.НайтиПоНаименованию(\"Основное подразделение\", Истина);

				КонецЕсли;

				СтатьяЗатрат		 = Справочники.СтатьиЗатрат.НайтиПоНаименованию(\"Себестоимость товара\", Истина);
				ДоходОтРеализации	 = Справочники.Доходы.НайтиПоНаименованию(\"Доход от реализации продукции и оказания услуг\", Истина);
				НоменклатурнаяГруппа = Справочники.НоменклатурныеГруппы.НайтиПоНаименованию(\"Основная номенклатурная группа\", Истина);

				ТекущийОбъект.ВидОперации = Перечисления.ВидыОперацийВозвратТоваровОтПокупателя.ВозвратТоваров;

				Для Каждого Стр из ТекущийОбъект.Товары Цикл

					Документы.ВозвратТоваровОтПокупателя.ЗаполнитьСчетаУчетаВСтрокеТабличнойЧасти(ДанныеОбъекта, Стр, \"Товары\", ОбработкаТабличныхЧастей.ПолучитьСведенияОНоменклатуре(Стр.Номенклатура, ДанныеОбъекта));
					
					//6020
					Стр.СубконтоДоходовБУ1 = ДоходОтРеализации;
					Стр.СубконтоДоходовБУ2 = НоменклатурнаяГруппа;
					
					Если ВедетсяУчетПоПодразделениям Тогда

						Стр.СубконтоДоходовБУ3 = Подразделение;

					КонецЕсли;
					
					//6020Н
					Стр.СубконтоДоходовНУ1 = ДоходОтРеализации; 
					Стр.СубконтоДоходовНУ2 = Стр.Номенклатура;
					
					//7010
					Стр.СубконтоСписанияСебестоимостиБУ1 = СтатьяЗатрат;
					Стр.СубконтоСписанияСебестоимостиБУ2 = НоменклатурнаяГруппа;
					
					Если ВедетсяУчетПоПодразделениям Тогда

						Стр.СубконтоСписанияСебестоимостиБУ3 = Подразделение;

					КонецЕсли;
					
					//7000Н
					Стр.СубконтоСписанияСебестоимостиНУ1 = СтатьяЗатрат;
					Стр.СубконтоСписанияСебестоимостиНУ2 = НоменклатурнаяГруппа;
					
					Стр.НДСВидОперацииРеализации = Справочники.ВидыРеализации.ВозвратТМЗ;
					
				КонецЦикла;                               
				
				ТекущийОбъект.УстановитьНовыйНомер(\"0\");
			",
			"ПослеЗаписи": "
				ТекущийОбъект.Услуги.Очистить();
				
				ТекущийОбъект.СуммаДокумента = ТекущийОбъект.Товары.Итог(\"Сумма\") + ТекущийОбъект.Услуги.Итог(\"Сумма\");
				
				ТекущийОбъект.Записать(РежимЗаписиДокумента.Запись);
			
				СчетФактураВыданный = Exchange_Обмен.ПолучитьСчетФактуру(ТекущийОбъект.Ссылка);
				
				СчетФактураВыданный.Товары.Очистить();
				СчетФактураВыданный.Услуги.Очистить();
				СчетФактураВыданный.ДокументыОснования.Очистить();

				СчетФактураВыданный.Заполнить(ТекущийОбъект.Ссылка);
				
				ЗапросДокументаОснование = Новый Запрос(\"ВЫБРАТЬ
				|	СчетФактураВыданный.Ссылка КАК Ссылка
				|ИЗ
				|	Документ.СчетФактураВыданный КАК СчетФактураВыданный
				|ГДЕ
				|	СчетФактураВыданный.ДокументОснование = &ДокументОснование\");
				
				ЗапросДокументаОснование.УстановитьПараметр(\"ДокументОснование\", СчетФактураВыданный.ДокументОснование.ДокументОснование);
				
				Выборка = ЗапросДокументаОснование.Выполнить().Выбрать();
				
				Если Выборка.Следующий() Тогда
					
					СчетФактураВыданный.ОсновнойСчетФактура = Выборка.Ссылка;
					
				КонецЕсли;
	
				СчетФактураВыданный.Записать(РежимЗаписиДокумента.Запись);
			"
		}
	},{
		"Документ": {
			"Имя": { "СводныйВозврат": "ВозвратТоваровОтПокупателя" },
			"Синоним": { "СводныйВозврат": "Сводный возврат товаров" },
			"Поиск": "УникальныйИдентификатор",
			"ПриСоздании": "
				Отказ = Exchange_Обмен.ЕстьЭСФ(ТекущийОбъект.Ссылка) ИЛИ Exchange_Обмен.ПропускатьЗагруженныеДокументы(ТекущийОбъект, Параметры.ПропускатьЗагруженные);	

				ЗаполнениеДокументов.ЗаполнитьШапкуДокумента(ТекущийОбъект, ОбщегоНазначенияБКВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета(), \"Продажа\");
			",
			"Реквизиты": [  
				{ "Дата": "Дата" },
				{ "Номер": "Номер" },
				{ "Контрагент": "Контрагент" }
			],
			"ПослеСоздания": "
				ТекущийОбъект.Склад						 = Справочники.Склады.НайтиПоНаименованию(\"Основной склад\");
				ТекущийОбъект.ВидУчетаНУ				 = Справочники.ВидыУчетаНУ.НУ;
				ТекущийОбъект.УчитыватьКПН				 = Истина;
				ТекущийОбъект.УчитыватьНДС				 = Истина;
				ТекущийОбъект.СуммаВключаетНДС			 = Истина;
				ТекущийОбъект.КурсВзаиморасчетов		 = 1;
				ТекущийОбъект.КратностьВзаиморасчетов	 = 1;

				Если ЗначениеЗаполнено(ТекущийОбъект.Контрагент) Тогда
				
					ТекущийОбъект.ДоговорКонтрагента = ТекущийОбъект.Контрагент.ОсновнойДоговорКонтрагента;
					
				КонецЕсли;
			
				ТекущийОбъект.Товары.Очистить();
				ТекущийОбъект.Услуги.Очистить();
				ТекущийОбъект.НомераГТД.Очистить();
			",
			"ТабличныеЧасти": [ {
				"Имя": { "Товары": "Товары" },
				"ПередОбработкой": "",
				"Реквизиты": [  
					{ "Цена": "Цена" },
					{ "Сумма": "Сумма" },
					{ "СуммаНДС": "СуммаНДС" },
					{ "СтавкаНДС": "СтавкаНДС" },
					{ "Количество": "Количество" },
					{ "Номенклатура": "Номенклатура" }],
				"ПослеОбработки": " 
					НоваяСтрока.Коэффициент = 1;
				" 
				}
			],
			"ПередЗаписью": "
				ТекущийОбъект.ДокументОснование = Документы.РеализацияТоваровУслуг.ПолучитьСсылку(Новый УникальныйИдентификатор(Данные.ДокументОснование.UUID));
								
				Exchange_Обмен.УстановитьНовыйНомер(ТекущийОбъект, \"ВозвратТоваровОтПокупателя\");
			",
			"ПослеЗаписи": "
				Документы.ВозвратТоваровОтПокупателя.ЗаполнитьСчетаУчетаРасчетов(ТекущийОбъект);

				ДанныеОбъекта = Новый Структура(\"Организация, СтруктурноеПодразделение, ВидОперации, Дата, Ссылка, ВидУчетаНУ, ТипЦен, 
				|УчитыватьКПН, УчитыватьНДС, УчитыватьАкциз, СуммаВключаетНДС, СуммаВключаетАкциз,  
				|ВалютаДокумента, КурсВзаиморасчетов, КратностьВзаиморасчетов, Склад, ДоговорКонтрагента\");

				ЗаполнитьЗначенияСвойств(ДанныеОбъекта, ТекущийОбъект);

				ВедетсяУчетПоПодразделениям = ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.НаСчетеВедетсяУчетПоПодразделениям(ПланыСчетов.Типовой.ДоходОтРеализацииПродукцииИОказанияУслуг_);

				Если ВедетсяУчетПоПодразделениям Тогда
					
					Подразделение = Справочники.ПодразделенияОрганизаций.НайтиПоНаименованию(\"Основное подразделение\", Истина);

				КонецЕсли;

				СтатьяЗатрат		 = Справочники.СтатьиЗатрат.НайтиПоНаименованию(\"Себестоимость товара\", Истина);
				ДоходОтРеализации	 = Справочники.Доходы.НайтиПоНаименованию(\"Доход от реализации продукции и оказания услуг\", Истина);
				НоменклатурнаяГруппа = Справочники.НоменклатурныеГруппы.НайтиПоНаименованию(\"Основная номенклатурная группа\", Истина);

				Для Каждого Стр из ТекущийОбъект.Товары Цикл
					
					Документы.ВозвратТоваровОтПокупателя.ЗаполнитьСчетаУчетаВСтрокеТабличнойЧасти(ДанныеОбъекта, Стр, \"Товары\", ОбработкаТабличныхЧастей.ПолучитьСведенияОНоменклатуре(Стр.Номенклатура, ДанныеОбъекта));
	
					//6020
					Стр.СубконтоДоходовБУ1 = ДоходОтРеализации;
					Стр.СубконтоДоходовБУ2 = НоменклатурнаяГруппа;
					
					Если ВедетсяУчетПоПодразделениям Тогда

						Стр.СубконтоДоходовБУ3 = Подразделение;

					КонецЕсли;
					
					//6020Н
					Стр.СубконтоДоходовНУ1 = ДоходОтРеализации; 
					Стр.СубконтоДоходовНУ2 = Стр.Номенклатура;
					
					//7010
					Стр.СубконтоСписанияСебестоимостиБУ1 = СтатьяЗатрат;
					Стр.СубконтоСписанияСебестоимостиБУ2 = НоменклатурнаяГруппа;
					
					Если ВедетсяУчетПоПодразделениям Тогда

						Стр.СубконтоСписанияСебестоимостиБУ3 = Подразделение;

					КонецЕсли;
					
					//7000Н
					Стр.СубконтоСписанияСебестоимостиНУ1 = СтатьяЗатрат;
					Стр.СубконтоСписанияСебестоимостиНУ2 = НоменклатурнаяГруппа;
					
					Стр.НДСВидОперацииРеализации = Справочники.ВидыРеализации.ВозвратТМЗ;
					
				КонецЦикла;

				ТекущийОбъект.Услуги.Очистить();
				
				ТекущийОбъект.СуммаДокумента = ТекущийОбъект.Товары.Итог(\"Сумма\") + ТекущийОбъект.Услуги.Итог(\"Сумма\");
				
				ТекущийОбъект.Записать(РежимЗаписиДокумента.Запись);
			
				СчетФактураВыданный = Exchange_Обмен.ПолучитьСчетФактуру(ТекущийОбъект.Ссылка);
				
				СчетФактураВыданный.Товары.Очистить();
				СчетФактураВыданный.Услуги.Очистить();
				СчетФактураВыданный.ДокументыОснования.Очистить();

				СчетФактураВыданный.Заполнить(ТекущийОбъект.Ссылка);
				
				ЗапросДокументаОснование = Новый Запрос(\"ВЫБРАТЬ
				|	СчетФактураВыданный.Ссылка КАК Ссылка
				|ИЗ
				|	Документ.СчетФактураВыданный КАК СчетФактураВыданный
				|ГДЕ
				|	СчетФактураВыданный.ДокументОснование = &ДокументОснование\");
				
				ЗапросДокументаОснование.УстановитьПараметр(\"ДокументОснование\", СчетФактураВыданный.ДокументОснование.ДокументОснование);
				
				Выборка = ЗапросДокументаОснование.Выполнить().Выбрать();
				
				Если Выборка.Следующий() Тогда
					
					СчетФактураВыданный.ОсновнойСчетФактура = Выборка.Ссылка;
					
				КонецЕсли;
	
				СчетФактураВыданный.Записать(РежимЗаписиДокумента.Запись);
			"
		}
	},{
		"Документ": {
			"Имя": { "СводноеПоступлениеТоваровУслуг": "ПоступлениеТоваровУслуг" },
			"Синоним": { "СводноеПоступлениеТоваровУслуг": "Сводное поступление товаров и услуг" },
			"Поиск": "УникальныйИдентификатор",
			"ПриСоздании": "
				Отказ = Exchange_Обмен.ПропускатьЗагруженныеДокументы(ТекущийОбъект, Параметры.ПропускатьЗагруженные);	

				ЗаполнениеДокументов.ЗаполнитьШапкуДокумента(ТекущийОбъект, ОбщегоНазначенияБКВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета(), \"Покупка\");
			",
			"Реквизиты": [  
				{ "Дата": "Дата" },
				{ "Номер": "Номер" },
				{ "Контрагент": "Контрагент" }
			],
			"ПослеСоздания": "
				ТекущийОбъект.Склад						 = Справочники.Склады.НайтиПоНаименованию(\"Основной склад\");
				ТекущийОбъект.ВидУчетаНУ				 = Справочники.ВидыУчетаНУ.НУ;
				ТекущийОбъект.УчитыватьКПН				 = Истина;
				ТекущийОбъект.УчитыватьНДС				 = Истина;
				ТекущийОбъект.СуммаВключаетНДС			 = Истина;
				ТекущийОбъект.КурсВзаиморасчетов		 = 1;
				ТекущийОбъект.КратностьВзаиморасчетов	 = 1;

				Если ЗначениеЗаполнено(ТекущийОбъект.Контрагент) Тогда
				
					ТекущийОбъект.ДоговорКонтрагента = ТекущийОбъект.Контрагент.ОсновнойДоговорКонтрагента;
					
				КонецЕсли;
			
				ТекущийОбъект.Товары.Очистить();
				ТекущийОбъект.Услуги.Очистить();
			",
			"ТабличныеЧасти": [ {
				"Имя": { "Товары": "Товары" },
				"ПередОбработкой": "",
				"Реквизиты": [  
					{ "Цена": "Цена" },
					{ "Сумма": "Сумма" },
					{ "СуммаНДС": "СуммаНДС" },
					{ "СтавкаНДС": "СтавкаНДС" },
					{ "Количество": "Количество" },
					{ "Номенклатура": "Номенклатура" }],
				"ПослеОбработки": " 
					НоваяСтрока.Коэффициент			 = 1;
					НоваяСтрока.НДСВидПоступления	 = Справочники.ВидыПоступления.ПриобретениеТМЗ;
				" 
				}, {
				"Имя": { "Услуги": "Услуги" },
				"ПередОбработкой": "",
				"Реквизиты": [  
					{ "Цена": "Цена" },
					{ "Сумма": "Сумма" },
					{ "СуммаНДС": "СуммаНДС" },
					{ "СтавкаНДС": "СтавкаНДС" },
					{ "Количество": "Количество" },
					{ "Номенклатура": "Номенклатура" }],
				"ПослеОбработки": " 
					НоваяСтрока.Содержание = Строка(НоваяСтрока.Номенклатура);
				" 
				}
			],
			"ПередЗаписью": "
				Документы.ПоступлениеТоваровУслуг.ЗаполнитьСчетаУчетаРасчетов(ТекущийОбъект);
				
				Документы.ПоступлениеТоваровУслуг.ЗаполнитьСчетаУчетаВТабличнойЧасти(ТекущийОбъект, \"Товары\");

				Для Каждого Стр Из ТекущийОбъект.Товары Цикл
					
					Документы.ПоступлениеТоваровУслуг.ЗаполнитьРеквизитыНалоговогоУчета(ТекущийОбъект, Стр, \"Товары\");
					
				КонецЦикла;
								
				Exchange_Обмен.УстановитьНовыйНомер(ТекущийОбъект, \"ПоступлениеТоваровУслуг\");
			",
			"ПослеЗаписи": ""
		}
	},{
		"Документ": {
			"Имя": { "ПриходныйКассовыйОрдер": "ПриходныйКассовыйОрдер" },
			"Синоним": { "ПриходныйКассовыйОрдер": "Приходный кассовый ордер" },
			"Поиск": "УникальныйИдентификатор",
			"ПриСоздании": "
				Отказ = Exchange_Обмен.ПропускатьЗагруженныеДокументы(ТекущийОбъект, Параметры.ПропускатьЗагруженные);	

				ЗаполнениеДокументов.ЗаполнитьШапкуДокумента(ТекущийОбъект, ОбщегоНазначенияБКВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета());
			",
			"Реквизиты": [  
				{ "Дата": "Дата" },
				{ "Номер": "Номер" },
				{ "ПринятоОт": "ПринятоОт" },
				{ "Основание": "Основание" },
				{ "СтавкаНДС": "СтавкаНДС" },
				{ "Контрагент": "Контрагент" },
				{ "НомерЧекаККМ": "НомерЧекаККМ" },
				{ "СуммаДокумента": "СуммаДокумента" },
				{ "ДокументОснование": "ДокументОснование" }
			],
			"ПослеСоздания": "
				ТекущийОбъект.РасшифровкаПлатежа.Очистить();

				Если ЗначениеЗаполнено(ТекущийОбъект.ДокументОснование) Тогда
			
					Документы.ПриходныйКассовыйОрдер.ЗаполнитьПоДокументуОснованию(ТекущийОбъект, ТекущийОбъект.ДокументОснование);
					
					ЗаполнятьТабличнуюЧасть = Ложь;

				КонецЕсли;

				ТекущийОбъект.Касса				 = Справочники.Кассы.НайтиПоНаименованию(\"Основная касса\");
				ТекущийОбъект.ВидУчетаНУ		 = Справочники.ВидыУчетаНУ.НУ;
				ТекущийОбъект.ВидОперации		 = Перечисления.ВидыОперацийПКО.ОплатаПокупателя;				

				Если ЗначениеЗаполнено(ТекущийОбъект.Контрагент) Тогда
				
					ТекущийОбъект.ДоговорКонтрагента = ТекущийОбъект.Контрагент.ОсновнойДоговорКонтрагента;
					
				КонецЕсли;
			",
			"ТабличныеЧасти": [ {
				"Имя": { "РасшифровкаПлатежа": "РасшифровкаПлатежа" },
				"ПередОбработкой": "",
				"Реквизиты": [  
					{ "СуммаНДС": "СуммаНДС" },
					{ "СтавкаНДС": "СтавкаНДС" },
					{ "СуммаПлатежа": "СуммаПлатежа" },
					{ "СуммаВзаиморасчетов": "СуммаВзаиморасчетов" }
				],
				"ПослеОбработки": "		
					Если ЗначениеЗаполнено(ТекущийОбъект.Контрагент) Тогда
					
						НоваяСтрока.ДоговорКонтрагента = ТекущийОбъект.Контрагент.ОсновнойДоговорКонтрагента;
						
					КонецЕсли;
					
					НоваяСтрока.КурсВзаиморасчетов		 = 1;
					НоваяСтрока.КратностьВзаиморасчетов	 = 1;
					
					НоваяСтрока.СтатьяДвиженияДенежныхСредств = Справочники.СтатьиДвиженияДенежныхСредств.НайтиПоНаименованию(\"Оплата от покупателя\");
					" 
				}
			],
			"ПередЗаписью": "
				Документы.ПриходныйКассовыйОрдер.ЗаполнитьСчетаКассы(ТекущийОбъект.Касса, ТекущийОбъект.СчетКасса);

				Для Каждого Стр Из ТекущийОбъект.РасшифровкаПлатежа Цикл
					
					Если НЕ ЗначениеЗаполнено(Стр.СчетУчетаРасчетовСКонтрагентомБУ) Тогда
						
						Документы.ПриходныйКассовыйОрдер.ЗаполнитьСчетаРасчетовСКонтрагентом(ТекущийОбъект, Стр);
						
					КонецЕсли;
					
				КонецЦикла; 
			",
			"ПослеЗаписи": ""
		}
	},{
		"Документ": {
			"Имя": { "РасходныйКассовыйОрдер": "РасходныйКассовыйОрдер" },
			"Синоним": { "РасходныйКассовыйОрдер": "Расходный кассовый ордер" },
			"Поиск": "УникальныйИдентификатор",
			"ПриСоздании": "
				Отказ = Exchange_Обмен.ПропускатьЗагруженныеДокументы(ТекущийОбъект, Параметры.ПропускатьЗагруженные);	

				ЗаполнениеДокументов.ЗаполнитьШапкуДокумента(ТекущийОбъект, ОбщегоНазначенияБКВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета());
			",
			"Реквизиты": [  
				{ "Дата": "Дата" },
				{ "Номер": "Номер" },
				{ "Выдать": "Выдать" },
				{ "Основание": "Основание" },
				{ "Контрагент": "Контрагент" },
				{ "НомерЧекаККМ": "НомерЧекаККМ" },
				{ "СуммаДокумента": "СуммаДокумента" },
				{ "ДокументОснование": "ДокументОснование" }
			],
			"ПослеСоздания": "
				ТекущийОбъект.РасшифровкаПлатежа.Очистить();

				Если ЗначениеЗаполнено(ТекущийОбъект.ДокументОснование) Тогда
			
					Документы.РасходныйКассовыйОрдер.ЗаполнитьПоДокументуОснованию(ТекущийОбъект, ТекущийОбъект.ДокументОснование);
					
					ЗаполнятьТабличнуюЧасть = Ложь;

				КонецЕсли;

				ТекущийОбъект.Касса				 = Справочники.Кассы.НайтиПоНаименованию(\"Основная касса\");
				ТекущийОбъект.ВидУчетаНУ		 = Справочники.ВидыУчетаНУ.НУ;
				ТекущийОбъект.ВидОперации		 = Перечисления.ВидыОперацийРКО.ВозвратДенежныхСредствПокупателю;						
			",
			"ТабличныеЧасти": [ {
				"Имя": { "РасшифровкаПлатежа": "РасшифровкаПлатежа" },
				"ПередОбработкой": "",
				"Реквизиты": [  
					{ "СуммаНДС": "СуммаНДС" },
					{ "СтавкаНДС": "СтавкаНДС" },
					{ "СуммаПлатежа": "СуммаПлатежа" },
					{ "СуммаВзаиморасчетов": "СуммаВзаиморасчетов" }
				],
				"ПослеОбработки": "
				
					Если ЗначениеЗаполнено(ТекущийОбъект.Контрагент) Тогда
					
						НоваяСтрока.ДоговорКонтрагента = ТекущийОбъект.Контрагент.ОсновнойДоговорКонтрагента;
						
					КонецЕсли;
					
					НоваяСтрока.КурсВзаиморасчетов		 = 1;
					НоваяСтрока.КратностьВзаиморасчетов	 = 1;
					
					НоваяСтрока.СтатьяДвиженияДенежныхСредств = Справочники.СтатьиДвиженияДенежныхСредств.НайтиПоНаименованию(\"Возврат денежных средств покупателю\");
				" 
				}
			],
			"ПередЗаписью": "
				Документы.РасходныйКассовыйОрдер.ЗаполнитьСчетаКассы(ТекущийОбъект.Касса, ТекущийОбъект.СчетКасса);

				Для Каждого Стр Из ТекущийОбъект.РасшифровкаПлатежа Цикл
					
					Если НЕ ЗначениеЗаполнено(Стр.СчетУчетаРасчетовСКонтрагентомБУ) Тогда
						
						Документы.РасходныйКассовыйОрдер.ЗаполнитьСчетаРасчетовСКонтрагентом(ТекущийОбъект, Стр);
						
					КонецЕсли;
					
				КонецЦикла; 
			",
			"ПослеЗаписи": ""
		}
	},{
		"Документ": {
			"Имя": { "СписаниеТоваров": "СписаниеТоваров" },
			"Синоним": { "СписаниеТоваров": "Списание товаров" },
			"Поиск": "УникальныйИдентификатор",
			"ПриСоздании": "
				Отказ = Exchange_Обмен.ПропускатьЗагруженныеДокументы(ТекущийОбъект, Параметры.ПропускатьЗагруженные);	

				ЗаполнениеДокументов.ЗаполнитьШапкуДокумента(ТекущийОбъект, ОбщегоНазначенияБКВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета());
			",
			"Реквизиты": [  
				{ "Дата": "Дата" },
				{ "Номер": "Номер" }
			],
			"ПослеСоздания": "
				ТекущийОбъект.Склад						 = Справочники.Склады.НайтиПоНаименованию(\"Основной склад\");
				ТекущийОбъект.ВидУчетаНУ				 = Справочники.ВидыУчетаНУ.НУ;
				ТекущийОбъект.УчитыватьКПН				 = Истина;
				ТекущийОбъект.УчитыватьНДС				 = Истина;
			
				ТекущийОбъект.Товары.Очистить();
			",
			"ТабличныеЧасти": [ {
				"Имя": { "Товары": "Товары" },
				"ПередОбработкой": "",
				"Реквизиты": [  
					{ "Количество": "Количество" },
					{ "Номенклатура": "Номенклатура" }],
				"ПослеОбработки": " 
					НоваяСтрока.Коэффициент = 1;
				" 
				}
			],
			"ПередЗаписью": "
				СтатьяЗатрат = Справочники.СтатьиЗатрат.НайтиПоНаименованию(\"Расходы по инвентаризации\");

				Документы.СписаниеТоваров.ЗаполнитьСчетаУчетаВТабличнойЧасти(ТекущийОбъект, \"Товары\");

				Для Каждого Стр Из ТекущийОбъект.Товары Цикл
					
					Стр.СтавкаНДС = Стр.Номенклатура.СтавкаНДС;
					
					Стр.КлючСвязи = ОбщегоНазначенияБККлиентСервер.НовыйКлючСвязиСтрокиТаблицы(ТекущийОбъект.Товары);

					//7470
					Стр.СчетЗатратБУ = ПланыСчетов.Типовой.РасходыОтОбесцененияФинансовыхИнструментов;
					
					//7480Н
					Стр.СчетЗатратНУ = Стр.СчетЗатратБУ.СчетНУ;
					
					Стр.СубконтоЗатратБУ1 = СтатьяЗатрат;
					Стр.СубконтоЗатратНУ1 = СтатьяЗатрат;
					
				КонецЦикла;

				Если НомераГТДСервер.ВедетсяУчетПоТоварамОрганизаций(ТекущийОбъект.Дата) Тогда
					
					ТаблицаДокумента = НомераГТДСервер.ПодготовитьТаблицуТоваровСУчетомСкладовВТЧ(ТекущийОбъект.Товары, Истина, ТекущийОбъект.Склад);
					
					НомераГТДСервер.ЗаполнитьТаблицуНомераГТД(ТекущийОбъект, ТаблицаДокумента, НомераГТДСервер.ПодготовитьТаблицуНомеровГТД(ТаблицаДокумента, ТекущийОбъект.НомераГТД.Выгрузить()), \"СначалаЗаполненными\");
					
				КонецЕсли;
			",
			"ПослеЗаписи": ""
		}
	},{
		"Справочник": {
			"Имя": { "Номенклатура": "Номенклатура" },
			"Поиск": "Наименование",
			"Реквизиты": [  
				{ "Наименование": "Наименование" }
			],
			"ТабличныеЧасти": []
		}
	},{
		"Справочник": {
			"Имя": { "СтавкиНДС": "СтавкиНДС" },
			"Поиск": "Наименование",
			"Реквизиты": [  
				{ "Ставка": "Ставка" },
				{ "Наименование": "Наименование" }
			],
			"ТабличныеЧасти": []
		}
	},{
		"Справочник": {
			"Имя": { "Склады": "Склады" },
			"Синоним": { "Склады": "Склады (места хранения)" },
			"Поиск": "Наименование",
			"Реквизиты": [  
				{ "Наименование": "Наименование" }
			],
			"ТабличныеЧасти": []
		}
	},{
		"Справочник": {
			"Имя": { "Контрагенты": "Контрагенты" },
			"Синоним": { "Контрагенты": "Контрагенты" },
			"Поиск": "НаименованиеПолное",
			"ПриСоздании": "
				Отказ = ТекущийОбъект.Exchange_НеОбновлятьПриОбмене;
			",
			"Реквизиты": [  
				{ "Наименование": "Наименование" },
				{ "НаименованиеПолное": "НаименованиеПолное" },
				{ "ИдентификационныйНомер": "ИдентификационныйКодЛичности" }
			],
			"ТабличныеЧасти": [],
			"ПередЗаписью": "
				Если ТекущийОбъект.ЭтоНовый() Тогда
				
					ТекущийОбъект.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицо;
					
				КонецЕсли;

				Если ВРег(ТекущийОбъект.НаименованиеПолное) = ВРег(\"Физические лица\") Тогда
				
					ТекущийОбъект.НаименованиеПолное = \"\";
					
					ТекущийОбъект.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ФизЛицо;
				
				КонецЕсли;
			",
			"ПослеЗаписи": "
				Если НЕ ЗначениеЗаполнено(ТекущийОбъект.ОсновнойДоговорКонтрагента) Тогда
					
					Запрос = Новый Запрос(\"ВЫБРАТЬ ПЕРВЫЕ 1
					|	ДоговорыКонтрагентов.Ссылка КАК Ссылка
					|ИЗ
					|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
					|ГДЕ
					|	ДоговорыКонтрагентов.Владелец = &Владелец
					|	И НЕ ДоговорыКонтрагентов.ПометкаУдаления
					|
					|УПОРЯДОЧИТЬ ПО
					|	Ссылка УБЫВ
					|АВТОУПОРЯДОЧИВАНИЕ\");
					
					Запрос.УстановитьПараметр(\"Владелец\", ТекущийОбъект.Ссылка);
					
					Результат = Запрос.Выполнить();
					
					Если НЕ Результат.Пустой() Тогда
						
						Выборка = Результат.Выбрать();
						
						Пока Выборка.Следующий() Цикл
							
							ТекущийОбъект.ОсновнойДоговорКонтрагента = Выборка.Ссылка;

						КонецЦикла;
						
					Иначе
						
						ДоговорКонтрагента = Справочники.ДоговорыКонтрагентов.СоздатьЭлемент();
						
						ДоговорКонтрагента.Владелец				 = ТекущийОбъект.Ссылка; 
						ДоговорКонтрагента.Организация			 = Справочники.Организации.ОрганизацияПоУмолчанию();
						ДоговорКонтрагента.ВидДоговора			 = Перечисления.ВидыДоговоровКонтрагентов.СПокупателем;
						ДоговорКонтрагента.Наименование			 = \"Основной договор\";
						ДоговорКонтрагента.ВалютаВзаиморасчетов	 = ОбщегоНазначенияБКВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
						
						ДоговорКонтрагента.Записать();					
						
						ТекущийОбъект.ОсновнойДоговорКонтрагента = ДоговорКонтрагента.Ссылка;

						
					КонецЕсли;
					
					ТекущийОбъект.Записать();
					
				КонецЕсли;
			"
		}
	}
]